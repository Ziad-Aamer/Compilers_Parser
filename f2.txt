class@CLASS
Factorial@ID
{@LEFT_CURLY_B

@EOL
public@PUBLIC
static@STATIC
void@VOID
main@MAIN
(@LEFT_ROUND_B
String@STRING
[@LEFT_SQUARE_B
]@RIGHT_SQUARE_B
a@ID
)@RIGHT_ROUND_B
{@LEFT_CURLY_B

@EOL
System.out.println@SYSTEM.OUT.PRINTLN
(@LEFT_ROUND_B
new@NEW
Fac@ID
(@LEFT_ROUND_B
)@RIGHT_ROUND_B
.@DOT
ComputeFac@ID
(@LEFT_ROUND_B
10@INTEGER_LITERAL
)@RIGHT_ROUND_B
)@RIGHT_ROUND_B
;@SEMICOLON

@EOL
}@RIGHT_CURLY_B

@EOL
}@RIGHT_CURLY_B

@EOL
class@CLASS
Fac@ID
{@LEFT_CURLY_B

@EOL
Fac@ID
(@LEFT_ROUND_B
)@RIGHT_ROUND_B
{@LEFT_CURLY_B
}@RIGHT_CURLY_B
Fac@ID
(@LEFT_ROUND_B
String@STRING
name@ID
)@RIGHT_ROUND_B
{@LEFT_CURLY_B
}@RIGHT_CURLY_B
protected@PROTECTED
int@INT
ComputeFac@ID
(@LEFT_ROUND_B
int@INT
num@ID
)@RIGHT_ROUND_B
{@LEFT_CURLY_B

@EOL
int@INT
[@LEFT_SQUARE_B
]@RIGHT_SQUARE_B
num_aux@ID
;@SEMICOLON

@EOL
int@INT
num_aux2@ID
;@SEMICOLON

@EOL
if@IF
(@LEFT_ROUND_B
num@ID
<@LESSTHAN
1@INTEGER_LITERAL
)@RIGHT_ROUND_B

@EOL
num_aux@ID
=@EQUAL
1@INTEGER_LITERAL
+@PLUS
5@INTEGER_LITERAL
-@MINUS
6@INTEGER_LITERAL
;@SEMICOLON

@EOL
else@ELSE

@EOL
num_aux@ID
=@EQUAL
num@ID
*@MULTIPLY
(@LEFT_ROUND_B
this@THIS
.@DOT
ComputeFac@ID
(@LEFT_ROUND_B
num@ID
-@MINUS
1@INTEGER_LITERAL
)@RIGHT_ROUND_B
)@RIGHT_ROUND_B
;@SEMICOLON

@EOL
return@RETURN
num_aux@ID
;@SEMICOLON

@EOL
}@RIGHT_CURLY_B

@EOL
public@PUBLIC
int@INT
ComputeFac@ID
(@LEFT_ROUND_B
int@INT
num@ID
)@RIGHT_ROUND_B
{@LEFT_CURLY_B

@EOL
x@ID
[@LEFT_SQUARE_B
5@INTEGER_LITERAL
]@RIGHT_SQUARE_B
=@EQUAL
3@INTEGER_LITERAL
;@SEMICOLON

@EOL
//GGGGGGGGGGGGGG@COMMENT1

@EOL
/*
HHHHH
*/@COMMENT2

@EOL
return@RETURN
66@INTEGER_LITERAL
;@SEMICOLON

@EOL
}@RIGHT_CURLY_B

@EOL
}@RIGHT_CURLY_B

@EOL
